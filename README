
*****************************************************************
**MPI vs OMP demonstrating blocking vs non-blocking techniques***
*****************************************************************

Attached are graphs of various although not all inclusive tests of MPI blocking vs MPI non-blocking and OpenMP tests on Midway.

Unfortunately, or fortunately, the variance between several blocking verse non-blocking time trials was shockingly small. As you see from the graphs in some cases as N increased to upwards of 10,000 the difference remained within a tenth of a second and much smaller with smaller matrices. 

The strong scaling was linear as well between these two implemetations, where as we increased N and the number of cores, there was direct correlation of the time taken.

*******************************
***********  OpenMP  **********
*******************************

Most of the tests I ran with OpenMP, even verse serial were not as great as MPI. I was unsure if this was due to problem size or the effectiveness of MPI. Again to me, 10,000x10,000 is a fairly large size matrix compared to the hundredsxhundreds we usually work with. One line implementations of omp are great, and even easier than MPI, I think the thing I like about it best is parellel for where a quick loop can get optimized. 

***********************************************
******  Notes on compilation/argv's  **********
***********************************************

Included is a text file to send as argv1 called numfile.txt. It lists in order N, NT, L, T, u, v1 (the double part of v to be multiplied by u). I do also init the programs outside of the file should it be forgotten.

There are two asserts - one for the Courant stability condition and the other for my code condition being that I divide by root of nprocs so, please use 4, 16, 25 procs. 
